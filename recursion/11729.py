# 백준 11729번 '하노이 탑 이동 순서'
# 재귀
# [접근 포인트]
# 1. n-1개의 원판(1 ~ n-1)을 기둥 1에서 기둥 2로 옮긴다.
# 2. n번 원판을 기둥 1에서 기둥 3으로 옮긴다.
# 3. n-1개의 원판을 기둥 2에서 기둥 3으로 옮긴다.
# -> 원판이 n-1개일 때 옮길 수 있으면 원판이 n개일 때에도 옮길 수 있다.

# 정리 하자면,
# 원판이 1개일 때 원판을 내가 원하는 곳으로 옮길 수 있고, 또한 원판이 k개일 때 옮길 수 있으면 원판이 k+1개일 때도 옮길 수 있다.
# 위의 두 조건이 성립 하므로, 이 문제는 재귀를 활용해 해결할 수 있다.

# [1] 함수의 정의
# def hanoi(a, b, n) { n개의 원판을 기둥 a에서 기둥 b로 옮기는 방법을 출력 하는 함수. a, b가 각각 시작 점과 도착 점이다. }

# [2] base condition
# n = 1일때 기둥 a에서 기둥 b로 옮긴다. (print(a, b))

# [3] 재귀식
# 1. n-1개의 원판을 기둥 a에서 기둥 '6-a-b'로 옮긴다.      -> hanoi(a, 6 - a - b, n - 1)
# 2. n번 원판을 기둥 a에서 기둥 b로 옮긴다.                -> print(a, b)
# 3. n-1개의 원판을 기둥 '6-a-b' 에서 기둥 'b'로 옮긴다.   -> hanoi(6 - a - b, b, n - 1)

K = int(input())

print(2 ** K - 1)

def hanoi(a, b, n):
    if n == 1:
        print(a, b)
        return
    hanoi(a, 6 - a - b, n - 1)
    print(a, b)
    hanoi(6 - a - b, b, n - 1)

hanoi(1, 3, K)
